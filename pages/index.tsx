import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import CategoryButton from "../components/CategoryButton/CategoryButton";
import styles from "../styles/Home.module.css";
import { connect } from "react-redux";
import {
  changeCategoryAction,
  getProductsAction,
  addCartAction,
  getCartAction,
} from "../redux/productsDuck";
import { useCallback, useEffect } from "react";
import styled from "styled-components";
import CardProduct from "../components/CardProduct/CardProduct";
interface Props {
  Categories: any;
  Products: any;
  changeCategoryAction: any;
  productos: any;
  getProductsAction: any;
  categoria: any;
  addCartAction: any;
  cart: any;
  getCartAction: any;
}

const CategoryDeck = styled.div`
  display: flex;
  gap: 2rem;
  margin-bottom: 4rem;
`;

const ProductsDeck = styled.div`
  display: flex;
  gap: 2rem;
  flex-wrap: wrap;
`;

const HomeStyled = styled.div`
  display: flex;
  min-height: 100vh;
`;

const Sidebar = styled.div`
  display: flex;
  flex-direction: column;
  width: 800px;
  background-color: #fdfdfb;
  box-shadow: 1px 2px 2px;
`;

const Home: NextPage<Props> = ({
  Categories,
  Products,
  changeCategoryAction,
  getProductsAction,
  addCartAction,
  productos,
  categoria,
  cart,
  getCartAction,
}) => {
  useEffect(() => {
    getProductsAction(categoria, Products);
    // getCartAction(cart)
  }, [Products, categoria, getProductsAction]);

  const categoryHandler = useCallback(
    (id: Number) => {
      changeCategoryAction(id);
    },
    [changeCategoryAction]
  );

  const cardHandler = ({ id, nom, price, image }: any) => {
    addCartAction({ id, nom, price, image });
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <HomeStyled>
        <div style={{ marginRight: "1rem" }}>
          <CategoryDeck>
            {Categories?.map((category: any) => {
              return (
                <CategoryButton
                  id={category.id}
                  handler={categoryHandler}
                  key={category.id}
                  name={category.name}
                  icon={category.icon}
                  categoria={categoria}
                />
              );
            })}
          </CategoryDeck>
          <ProductsDeck>
            {productos?.length
              ? productos.map((prod: any) => {
                  return (
                    <CardProduct
                      id={prod.id}
                      key={prod.id}
                      name={prod.name}
                      time={prod.time}
                      image={prod.image}
                      qualification={prod.qualification}
                      price={prod.price}
                      handler={cardHandler}
                    />
                  );
                })
              : null}
          </ProductsDeck>
        </div>
        <Sidebar>
          {cart?.length ? cart?.map((prod: any, index: number) => {
            return <h1 key={index}>{prod.name}</h1>;
          }):null}
        </Sidebar>
      </HomeStyled>
    </div>
  );
};

Home.getInitialProps = async ({ req }) => {
  const resCat = await fetch("http://localhost:3000/api/hello");
  const jsonCat = await resCat.json();

  const resProd = await fetch("http://localhost:3000/api/products");
  const jsonProd = await resProd.json();
  const categoria: any = 1;
  const productos: any = [];
  const cart: any = [];
  return {
    Categories: jsonCat,
    Products: jsonProd,
    changeCategoryAction,
    productos,
    getProductsAction,
    categoria,
    addCartAction,
    cart,
    getCartAction,
  };
};

export interface State {
  product: any;
}

const mapStateToProps = (state: State) => {
  return {
    categoria: state.product.currentCategory,
    productos: state.product.currentProducts,
    cart: state.product.cart,
  };
};

export default connect(mapStateToProps, {
  changeCategoryAction,
  addCartAction,
  getProductsAction,
  getCartAction,
})(Home);
